DAT_GRAND_AVE <- DATA %>% group_by(Hz) %>%
summarise_at(frontal:ln_occipital, mean, na.rm = TRUE)
DAT_GRAND_AVE <- DATA %>% select(-X) %>%
group_by(Hz) %>%
summarise_at(c("frontal", "ln_occipital"), mean, na.rm = TRUE)
head(DAT_GRAND_AVE)
DAT_GRAND_AVE <- DATA %>% select(-X) %>%
group_by(Hz) %>%
summarise_at(c(frontal:ln_occipital), mean, na.rm = TRUE)
DAT_GRAND_AVE <- DATA %>% select(-X) %>%
group_by(Hz) %>%
summarise_at(.cols=frontal:ln_occipital, mean, na.rm = TRUE)
DAT_GRAND_AVE <- DATA %>% select(-X) %>%
group_by(Hz) %>%
summarise_at(vars(frontal:ln_occipital), mean, na.rm = TRUE)
head(DAT_GRAND_AVE)
DATA %>% select(-X) %>%
group_by(Hz) %>%
summarise(frontal_mean=mean(frontal, na.rm = TRUE))
DAT_GRAND_AVE <- DATA %>% select(-X) %>%
group_by(Hz) %>%
summarise_at(vars(frontal:ln_occipital), mean, na.rm = TRUE)
head(DAT_GRAND_AVE)
ggplot(data=DAT_GRAND_AVE, aes(x=Hz, y=frontal)) +
geom_line(col="black") +
geom_point(shape=16, col="black") +
scale_x_discrete(name = "Frequency (Hz)") +
scale_y_continuous(name = "Power (uV^2)") +
theme_bw()+
theme(axis.text=element_text(size=10, color="black"),
legend.text=element_text(size=12, color="black"),
legend.title=element_text(size=12, face="bold"),
axis.title=element_text(size=12, face="bold"),
plot.title=element_text(size=12, face="bold", hjust=0.5),
panel.grid.minor = element_blank(),
strip.text = element_text(size=12, face="bold"),
legend.position = "bottom")
ggplot(data=DAT_GRAND_AVE, aes(x=Hz, y=frontal)) +
geom_line(col="black") +
geom_point(shape=16, col="black") +
scale_x_discrete(name = "Frequency (Hz)") +
scale_y_continuous(name = "Power (uV^2)") +
ggtitle("Frontal Power")+
theme_bw()+
theme(axis.text=element_text(size=10, color="black"),
legend.text=element_text(size=12, color="black"),
legend.title=element_text(size=12, face="bold"),
axis.title=element_text(size=12, face="bold"),
plot.title=element_text(size=12, face="bold", hjust=0.5),
panel.grid.minor = element_blank(),
strip.text = element_text(size=12, face="bold"),
legend.position = "bottom")
ggplot(data=DAT_GRAND_AVE, aes(x=Hz, y=frontal)) +
geom_line(col="black") +
geom_point(shape=16, col="black") +
scale_x_continuous(name = "Frequency (Hz)") +
scale_y_continuous(name = "Power (uV^2)") +
ggtitle("Frontal Power")+
theme_bw()+
theme(axis.text=element_text(size=10, color="black"),
legend.text=element_text(size=12, color="black"),
legend.title=element_text(size=12, face="bold"),
axis.title=element_text(size=12, face="bold"),
plot.title=element_text(size=12, face="bold", hjust=0.5),
panel.grid.minor = element_blank(),
strip.text = element_text(size=12, face="bold"),
legend.position = "bottom")
ggplot(data=DAT_GRAND_AVE, aes(x=ln_Hz, y=ln_frontal)) +
geom_line(col="black") +
geom_point(shape=16, col="black") +
scale_x_continuous(name = "Frequency (Hz)") +
scale_y_continuous(name = "Power (uV^2)") +
ggtitle("Frontal Power")+
theme_bw()+
theme(axis.text=element_text(size=10, color="black"),
legend.text=element_text(size=12, color="black"),
legend.title=element_text(size=12, face="bold"),
axis.title=element_text(size=12, face="bold"),
plot.title=element_text(size=12, face="bold", hjust=0.5),
panel.grid.minor = element_blank(),
strip.text = element_text(size=12, face="bold"),
legend.position = "bottom")
# Plotting all of the regions by transforming the data from long to wide
head(DAT_GRAND_AVE)
DAT_GRAND_AVE %>% select(Hz:occipital) %>%
pivot_longer(cols=frontal:occipital, names_to = region, values_to = power)
DAT_GRAND_AVE %>% select(Hz:occipital)
DAT_GRAND_AVE %>% select(Hz:occipital) %>%
pivot_longer(!Hz, names_to = region, values_to = power)
DAT_GRAND_AVE %>% select(Hz:occipital) %>%
pivot_longer(cols=frontal:occipital, names_to = "region", values_to = "power")
DAT_GRAND_AVE_LONG <- DAT_GRAND_AVE %>% select(Hz:occipital) %>%
pivot_longer(cols=frontal:occipital, names_to = "region", values_to = "power")
DAT_GRAND_AVE %>% select(ln_Hz:ln_occipital) %>%
pivot_longer(cols=ln_frontal:ln_occipital, names_to = "region", values_to = "ln_power")
DAT_GRAND_AVE_LOG <- DAT_GRAND_AVE %>% select(ln_Hz:ln_occipital) %>%
pivot_longer(cols=ln_frontal:ln_occipital, names_to = "region", values_to = "ln_power")
head(DAT_GRAND_AVE_LONG)
ggplot(data=DAT_GRAND_AVE_LONG, aes(x=Hz, y=power)) +
geom_line(aes(col=region)) +
geom_point(aes(col=region), shape=16) +
scale_x_continuous(name = "Frequency (Hz)") +
scale_y_continuous(name = "Power (uV^2)") +
theme_bw()+
labs(color="Region")+
theme(axis.text=element_text(size=10, color="black"),
legend.text=element_text(size=12, color="black"),
legend.title=element_text(size=12, face="bold"),
axis.title=element_text(size=12, face="bold"),
plot.title=element_text(size=12, face="bold", hjust=0.5),
panel.grid.minor = element_blank(),
strip.text = element_text(size=12, face="bold"),
legend.position = "bottom")
ggplot(data=DAT_GRAND_AVE_LOG, aes(x=ln_Hz, y=ln_power)) +
geom_line(aes(col=region)) +
geom_point(aes(col=region), shape=16) +
scale_x_continuous(name = "Frequency log(Hz)") +
scale_y_continuous(name = "Power log(uV^2)") +
theme_bw()+
labs(color="Region")+
theme(axis.text=element_text(size=10, color="black"),
legend.text=element_text(size=12, color="black"),
legend.title=element_text(size=12, face="bold"),
axis.title=element_text(size=12, face="bold"),
plot.title=element_text(size=12, face="bold", hjust=0.5),
panel.grid.minor = element_blank(),
strip.text = element_text(size=12, face="bold"),
legend.position = "bottom")
# Averages within each condition
head(DATA)
library(tidyverse) # data formatting and graphing tools
# 1.0. Importing, merging, and relabeling, the data.
setwd("~/GitHub/ReproRehab/")
list.files()
list.files("./data")
list.files("./data/EEG_sub_files/")
setwd("~/GitHub/ReproRehab/data/EEG_sub_files/")
# Testing out importing data with 1 subject:
test <- read.csv("./oa01_ec.csv",
header=TRUE,
stringsAsFactors = TRUE)
head(test)
file_names <- list.files()
file_names
file_names[1]
file_names[7]
# A basic for-loop:
for(i in seq(1:10)) {
print(i)
}
for(name in file_names) {
print(name)
}
k = 0
for(file in file_names) {
k = k+1
print(file)
print(k)
}
# Reading in the individual subjects and merging into a master file
if(1>=2){
"Oh yeah!"
}
file_names[1]
if(file_names[1]=="oa01_ec.csv"){
"Oh yeah!"
}
if(file_names[1]=="OA01_ec.csv"){
"Oh yeah!"
}
if(file_names[1]=="OA01_ec.csv"){
"Oh yeah!"
} else {"Oh No!"}
# Putting an if else statement inside of our for-lopp
for(name in file_names) {
print(name)
subject <- read.csv(name,
header=TRUE,
stringsAsFactors = TRUE)
# if the MASTER data set doesn't exist, create it
if (!exists("MASTER")){
MASTER <- data.frame(subject)
MASTER$file_id <- name
} else {
# Create the temporary data file:
temp_dataset <- data.frame(subject)
temp_dataset$file_id <-  name
MASTER<-rbind(MASTER, temp_dataset)
# Remove or "empty" the temporary data set
rm(temp_dataset)
}
}
head(MASTER)
# move the file ID and Hz columns to the front of the dataset
MASTER <- MASTER %>% relocate(file_id)
MASTER <- MASTER %>% select(-X)
head(MASTER)
# Break the file id into subject name and the condition
str_split(MASTER$file_id, "_")[[1]]
MASTER$subID <- factor(map_chr(str_split(MASTER$file_id, "_"), 1))
MASTER$condition <- factor(map_chr(str_split(MASTER$file_id, "_"), 2))
map_chr(str_split(MASTER$file_id, "_"), 2)
str_sub(map_chr(str_split(MASTER$file_id, "_"), 1), 1,2)
str_sub(map_chr(str_split(MASTER$file_id, "_"), 2), 1,2)
MASTER$condition <- factor(str_sub(map_chr(str_split(MASTER$file_id, "_"), 1), 1,2))
head(MASTER)
MASTER <- MASTER %>% relocate(file_id, subID, condition)
head(MASTER)
# Export the cleaned PSD data
getwd()
setwd("~/GitHub/ReproRehab/data/")
write.csv(MASTER, "MASTER_EO_and_EC_EEG.csv")
library(tidyverse) # data formatting and graphing tools
# 2.0. Wrangling Data
setwd("~/GitHub/ReproRehab/")
list.files()
list.files("./data/")
DATA <- read.csv("./data/MASTER_EO_and_EC_EEG.csv",
header=TRUE,
stringsAsFactors = TRUE)
# selecting specific columns
head(DATA)
?dplyr::select
DATA %>% select(subID, condition, Hz, Fz)
select(.data=DATA, subID, condition, Hz, Fz)
DATA %>% select(subID:F3)
library(tidyverse) # data formatting and graphing tools
# 1.0. Importing, merging, and relabeling, the data.
setwd("~/GitHub/ReproRehab/")
list.files()
list.files("./data")
list.files("./data/EEG_sub_files/")
setwd("~/GitHub/ReproRehab/data/EEG_sub_files/")
# Testing out importing data with 1 subject:
test <- read.csv("./oa01_ec.csv",
header=TRUE,
stringsAsFactors = TRUE)
head(test)
file_names <- list.files()
file_names
file_names[1]
file_names[7]
# A basic for-loop:
for(i in seq(1:10)) {
print(i)
}
for(name in file_names) {
print(name)
}
k = 0
for(file in file_names) {
k = k+1
print(file)
print(k)
}
# Reading in the individual subjects and merging into a master file
if(1>=2){
"Oh yeah!"
}
file_names[1]
if(file_names[1]=="oa01_ec.csv"){
"Oh yeah!"
}
if(file_names[1]=="OA01_ec.csv"){
"Oh yeah!"
}
if(file_names[1]=="OA01_ec.csv"){
"Oh yeah!"
} else {"Oh No!"}
# Putting an if else statement inside of our for-lopp
for(name in file_names) {
print(name)
subject <- read.csv(name,
header=TRUE,
stringsAsFactors = TRUE)
# if the MASTER data set doesn't exist, create it
if (!exists("MASTER")){
MASTER <- data.frame(subject)
MASTER$file_id <- name
} else {
# Create the temporary data file:
temp_dataset <- data.frame(subject)
temp_dataset$file_id <-  name
MASTER<-rbind(MASTER, temp_dataset)
# Remove or "empty" the temporary data set
rm(temp_dataset)
}
}
head(MASTER)
# move the file ID and Hz columns to the front of the dataset
MASTER <- MASTER %>% relocate(file_id)
MASTER <- MASTER %>% select(-X)
head(MASTER)
# Break the file id into subject name and the condition
str_split(MASTER$file_id, "_")[[1]]
MASTER$subID <- factor(map_chr(str_split(MASTER$file_id, "_"), 1))
MASTER$condition <- factor(map_chr(str_split(MASTER$file_id, "_"), 2))
map_chr(str_split(MASTER$file_id, "_"), 2)
str_sub(map_chr(str_split(MASTER$file_id, "_"), 2), 1,2)
MASTER$condition <- factor(str_sub(map_chr(str_split(MASTER$file_id, "_"), 2), 1,2))
head(MASTER)
MASTER <- MASTER %>% relocate(file_id, subID, condition)
head(MASTER)
# Export the cleaned PSD data
getwd()
setwd("~/GitHub/ReproRehab/data/")
write.csv(MASTER, "MASTER_EO_and_EC_EEG.csv")
# 2.0. Wrangling Data
setwd("~/GitHub/ReproRehab/")
list.files()
list.files("./data/")
DATA <- read.csv("./data/MASTER_EO_and_EC_EEG.csv",
header=TRUE,
stringsAsFactors = TRUE)
# selecting specific columns
head(DATA)
?dplyr::select
DATA %>% select(subID, condition, Hz, Fz)
select(.data=DATA, subID, condition, Hz, Fz)
DATA %>% select(subID:F3)
DATA %>% select(-X)
DAT2 <- DATA %>% select(-X, -file_id)
# filtering specific rows
head(DAT2)
?dplyr::filter
DAT2 %>% filter(subID=="oa01")
DAT2 %>% filter(subID=="oa01" | subID=="oa02")
DAT2 %>% filter(subID=="oa01" & Hz==0.997)
summary(unique(DAT2$Hz))
hist(unique(DAT2$Hz))
DAT3 <- DAT2 %>% filter(Hz<=30)
# computing new variables
head(DAT3)
DAT3$Frontal <- (DAT3$F3 + DAT3$F7 + DAT3$Fz + DAT3$F4 + DAT3$F8)/5
?dplyr::mutate()
?dplyr::transmute()
? dplyr::rowwise
DAT3 <- DAT3 %>% rowwise %>%
mutate(frontal = mean(c(F3, F7, Fz, F4, F8), na.rm=TRUE),
central = mean(c(C3, Pz, C4), na.rm=TRUE),
parietal = mean(c(P3, P7, Fz, P4, P8), na.rm=TRUE),
occipital = mean(c(O1, Oz, O2), na.rm=TRUE)
)
plot(DAT3$Frontal, DAT3$frontal)
cor(DAT3$Frontal, DAT3$frontal, use = "complete.obs")
# Selecting only the columns we want
head(DAT3)
DAT4 <- DAT3 %>% select(subID, condition, Hz,
frontal, central, parietal, occipital) %>%
mutate(ln_Hz = log(Hz+1),
ln_frontal = log(frontal),
ln_central = log(central),
ln_parietal = log(parietal),
ln_occipital = log(occipital))
head(DAT4)
setwd("~/GitHub/ReproRehab/data/")
write.csv(DAT4, "data_PROCESSED_EEG.csv")
library(tidyverse) # data formatting and graphing tools
# 2.0. Wrangling Data
setwd("~/GitHub/ReproRehab/")
list.files()
list.files("./data/")
DATA <- read.csv("./data/data_PROCESSED_EEG.csv",
header=TRUE,
stringsAsFactors = TRUE)
head(DATA)
# Aggregating the data across all participants:
?dplyr::group_by
DATA %>% select(-X) %>%
group_by(Hz) %>%
summarise(frontal_mean=mean(frontal, na.rm = TRUE))
?summarise_at
DAT_GRAND_AVE <- DATA %>% select(-X) %>%
group_by(Hz) %>%
summarise_at(vars(frontal:ln_occipital), mean, na.rm = TRUE)
head(DAT_GRAND_AVE)
ggplot(data=DAT_GRAND_AVE, aes(x=Hz, y=frontal)) +
geom_line(col="black") +
geom_point(shape=16, col="black") +
scale_x_continuous(name = "Frequency (Hz)") +
scale_y_continuous(name = "Power (uV^2)") +
ggtitle("Frontal Power")+
theme_bw()+
theme(axis.text=element_text(size=10, color="black"),
legend.text=element_text(size=12, color="black"),
legend.title=element_text(size=12, face="bold"),
axis.title=element_text(size=12, face="bold"),
plot.title=element_text(size=12, face="bold", hjust=0.5),
panel.grid.minor = element_blank(),
strip.text = element_text(size=12, face="bold"),
legend.position = "bottom")
ggplot(data=DAT_GRAND_AVE, aes(x=ln_Hz, y=ln_frontal)) +
geom_line(col="black") +
geom_point(shape=16, col="black") +
scale_x_continuous(name = "Frequency (Hz)") +
scale_y_continuous(name = "Power (uV^2)") +
ggtitle("Frontal Power")+
theme_bw()+
theme(axis.text=element_text(size=10, color="black"),
legend.text=element_text(size=12, color="black"),
legend.title=element_text(size=12, face="bold"),
axis.title=element_text(size=12, face="bold"),
plot.title=element_text(size=12, face="bold", hjust=0.5),
panel.grid.minor = element_blank(),
strip.text = element_text(size=12, face="bold"),
legend.position = "bottom")
# Plotting all of the regions by transforming the data from long to wide
head(DAT_GRAND_AVE)
DAT_GRAND_AVE_LONG <- DAT_GRAND_AVE %>% select(Hz:occipital) %>%
pivot_longer(cols=frontal:occipital, names_to = "region", values_to = "power")
head(DAT_GRAND_AVE_LONG)
DAT_GRAND_AVE_LOG <- DAT_GRAND_AVE %>% select(ln_Hz:ln_occipital) %>%
pivot_longer(cols=ln_frontal:ln_occipital, names_to = "region", values_to = "ln_power")
head(DAT_GRAND_AVE_LONG)
ggplot(data=DAT_GRAND_AVE_LONG, aes(x=Hz, y=power)) +
geom_line(aes(col=region)) +
geom_point(aes(col=region), shape=16) +
scale_x_continuous(name = "Frequency (Hz)") +
scale_y_continuous(name = "Power (uV^2)") +
theme_bw()+
labs(color="Region")+
theme(axis.text=element_text(size=10, color="black"),
legend.text=element_text(size=12, color="black"),
legend.title=element_text(size=12, face="bold"),
axis.title=element_text(size=12, face="bold"),
plot.title=element_text(size=12, face="bold", hjust=0.5),
panel.grid.minor = element_blank(),
strip.text = element_text(size=12, face="bold"),
legend.position = "bottom")
ggplot(data=DAT_GRAND_AVE_LOG, aes(x=ln_Hz, y=ln_power)) +
geom_line(aes(col=region)) +
geom_point(aes(col=region), shape=16) +
scale_x_continuous(name = "Frequency log(Hz)") +
scale_y_continuous(name = "Power log(uV^2)") +
theme_bw()+
labs(color="Region")+
theme(axis.text=element_text(size=10, color="black"),
legend.text=element_text(size=12, color="black"),
legend.title=element_text(size=12, face="bold"),
axis.title=element_text(size=12, face="bold"),
plot.title=element_text(size=12, face="bold", hjust=0.5),
panel.grid.minor = element_blank(),
strip.text = element_text(size=12, face="bold"),
legend.position = "bottom")
# Averages within each condition
head(DATA)
DAT_COND_AVE <- DATA %>% group_by(condition, Hz) %>%
summarise_at(vars(frontal:ln_occipital), mean, na.rm = TRUE)
head(DAT_COND_AVE)
head(DAT_COND_AVE)
DAT_COND_LONG <- DAT_COND_AVE %>% select(Hz:occipital) %>%
pivot_longer(cols=frontal:occipital, names_to = "region", values_to = "power")
DAT_COND_LONG <- DAT_COND_AVE %>% select(condition:occipital) %>%
pivot_longer(cols=frontal:occipital, names_to = "region", values_to = "power")
head(DAT_GRAND_AVE_LONG)
head(DAT_COND_AVE)
DAT_COND_LONG <- DAT_COND_AVE %>% select(condition:occipital) %>%
pivot_longer(cols=frontal:occipital, names_to = "region", values_to = "power")
head(DAT_GRAND_AVE_LONG)
head(DAT_COND_LONG)
head(DAT_COND_AVE)
DAT_COND_LONG_LOG <- DAT_COND_AVE %>% select(condition, ln_Hz:ln_occipital) %>%
pivot_longer(cols=ln_frontal:ln_occipital, names_to = "region", values_to = "ln_power")
head(DAT_COND_LONG_LOG)
ggplot(data=DAT_GRAND_AVE_LONG, aes(x=Hz, y=power)) +
geom_line(aes(col=region)) +
geom_point(aes(col=region), shape=16) +
facet_wrap(~condition)+
scale_x_continuous(name = "Frequency (Hz)") +
scale_y_continuous(name = "Power (uV^2)") +
theme_bw()+
labs(color="Region")+
theme(axis.text=element_text(size=10, color="black"),
legend.text=element_text(size=12, color="black"),
legend.title=element_text(size=12, face="bold"),
axis.title=element_text(size=12, face="bold"),
plot.title=element_text(size=12, face="bold", hjust=0.5),
panel.grid.minor = element_blank(),
strip.text = element_text(size=12, face="bold"),
legend.position = "bottom")
ggplot(data=DAT_COND_LONG, aes(x=Hz, y=power)) +
geom_line(aes(col=region)) +
geom_point(aes(col=region), shape=16) +
facet_wrap(~condition)+
scale_x_continuous(name = "Frequency (Hz)") +
scale_y_continuous(name = "Power (uV^2)") +
theme_bw()+
labs(color="Region")+
theme(axis.text=element_text(size=10, color="black"),
legend.text=element_text(size=12, color="black"),
legend.title=element_text(size=12, face="bold"),
axis.title=element_text(size=12, face="bold"),
plot.title=element_text(size=12, face="bold", hjust=0.5),
panel.grid.minor = element_blank(),
strip.text = element_text(size=12, face="bold"),
legend.position = "bottom")
ggplot(data=DAT_COND_LONG_LOG, aes(x=ln_Hz, y=ln_power)) +
geom_line(aes(col=region)) +
geom_point(aes(col=region), shape=16) +
facet_wrap(~condition)+
scale_x_continuous(name = "Frequency log(Hz)") +
scale_y_continuous(name = "Power log(uV^2)") +
theme_bw()+
labs(color="Region")+
theme(axis.text=element_text(size=10, color="black"),
legend.text=element_text(size=12, color="black"),
legend.title=element_text(size=12, face="bold"),
axis.title=element_text(size=12, face="bold"),
plot.title=element_text(size=12, face="bold", hjust=0.5),
panel.grid.minor = element_blank(),
strip.text = element_text(size=12, face="bold"),
legend.position = "bottom")
