mutate(diff = high_pressure-low_pressure) %>%
summarize(low_ave = mean(low_pressure),
low_sd = sd(low_pressure),
high_ave = mean(high_pressure),
high_sd = sd(high_pressure),
diff_ave = mean(diff),
diff_sd = sd(diff))
# Re-sampling to Estimate Statistical Power ----
ns = c(seq(from=30, to=100, by=10)) # sample sizes for the simulations
k = 200 # number of iterations at each sample size
# Re-sampling to Estimate Statistical Power ----
ns = c(seq(from=30, to=100, by=10)) # sample sizes for the simulations
k = 200 # number of iterations at each sample size
sim_data <- data.frame(matrix(NA, nrow = length(ns)*k,
ncol = 9))
sim_data <- sim_data %>% rename(n=X1,
iter=X2,
WS_p = X3,
low_ave=X4,
low_sd=X5,
high_ave=X6,
high_sd=X7,
diff_ave = X8,
diff_sd = X9)
row = 0
set.seed(1)
for (n in ns) {
print(n)
for (i in 1:k) {
row = row + 1
print(row)
teach_sample <- sample_n(distribution, size=n)
dat_long <- teach_sample %>% rownames_to_column(var="subID") %>%
pivot_longer(cols = low_pressure:high_pressure,
names_to = "test", values_to = "score")
options(contrasts=c("contr.sum","contr.poly"))
mod0 <- lmer(score~test+(1|subID), data=dat_long, REML=TRUE)
sim_data[row, 1] <- n
sim_data[row, 2] <- i
sim_data[row, 3] <- anova(mod0)[[6]][1] # WS p-value
# Summary Statistics
SUM_DATA <- dat_long %>% pivot_wider(names_from = "test", values_from = "score") %>%
mutate(diff = high_pressure-low_pressure) %>%
summarize(low_ave = mean(low_pressure),
low_sd = sd(low_pressure),
high_ave = mean(high_pressure),
high_sd = sd(high_pressure),
diff_ave = mean(diff),
diff_sd = sd(diff))
sim_data[row, 4] <- SUM_DATA[, "low_ave"]
sim_data[row, 5] <- SUM_DATA[, "low_sd"]
sim_data[row, 6] <- SUM_DATA[, "high_ave"]
sim_data[row, 7] <- SUM_DATA[, "high_sd"]
sim_data[row, 8] <- SUM_DATA[, "diff_ave"]
sim_data[row, 9] <- SUM_DATA[, "diff_sd"]
}
}
library(MASS); library(lme4); library(car); library(lmerTest); library(tidyverse)
# Expecting to Teach Group ----
set.seed(1)
size <- 1000 # size of the simulated population
meanvector <- c(51, 56) # means for pre and post tests
correl_matrix <- matrix(c(1, 0.8,
0.8, 1), # values for the sample correlation matrix
ncol = 2)
sds <- c(17, 19) # between subject SDs on each test
D <- diag(sds)
covariance_matrix <- D%*%correl_matrix%*%D
covariance_matrix
distribution <- mvrnorm(n = size,
mu = meanvector,
Sigma = covariance_matrix)
summary(distribution)
head(distribution)
distribution <- distribution %>% as_tibble() %>%
mutate(group = "teach") %>%
rename(low_pressure=V1, high_pressure=V2)
head(distribution)
hist(distribution$low_pressure, xlim=c(0,150))
hist(distribution$high_pressure, xlim=c(0,150))
set.seed(1)
teach_sample <- sample_n(distribution, size=10)
dat_long <- teach_sample %>% rownames_to_column(var="subID") %>%
pivot_longer(cols = low_pressure:high_pressure,
names_to = "test", values_to = "score")
head(dat_long)
mod0 <- lmer(score~test+(1|subID), data=dat_long, REML=TRUE)
Anova(mod0, type="III")
anova(mod0)
anova(mod0)[[6]][1] # test p-value
modelAOV <- aov(score~test+Error(subID), data = dat_long)
summary(modelAOV)
summary(modelAOV)[[2]][[1]][1,5]
mod_t_test <- t.test(score~test, data=dat_long, paired=TRUE)
print(mod_t_test)
mod_t_test$p.value
# Taking the descriptive statistics we might want from each sample
head(dat_long)
dat_long %>% pivot_wider(names_from = "test", values_from = "score") %>%
mutate(diff = high_pressure-low_pressure) %>%
summarize(low_ave = mean(low_pressure),
low_sd = sd(low_pressure),
high_ave = mean(high_pressure),
high_sd = sd(high_pressure),
diff_ave = mean(diff),
diff_sd = sd(diff))
# Re-sampling to Estimate Statistical Power ----
ns = c(seq(from=10, to=100, by=10)) # sample sizes for the simulations
k = 200 # number of iterations at each sample size
sim_data <- data.frame(matrix(NA, nrow = length(ns)*k,
ncol = 9))
sim_data <- sim_data %>% rename(n=X1,
iter=X2,
WS_p = X3,
low_ave=X4,
low_sd=X5,
high_ave=X6,
high_sd=X7,
diff_ave = X8,
diff_sd = X9)
head(sim_data)
row = 0
set.seed(1)
row = 0
set.seed(1)
for (n in ns) {
print(n)
for (i in 1:k) {
row = row + 1
print(row)
teach_sample <- sample_n(distribution, size=n)
dat_long <- teach_sample %>% rownames_to_column(var="subID") %>%
pivot_longer(cols = low_pressure:high_pressure,
names_to = "test", values_to = "score")
options(contrasts=c("contr.sum","contr.poly"))
mod0 <- lmer(score~test+(1|subID), data=dat_long, REML=TRUE)
sim_data[row, 1] <- n
sim_data[row, 2] <- i
sim_data[row, 3] <- anova(mod0)[[6]][1] # WS p-value
# Summary Statistics
SUM_DATA <- dat_long %>% pivot_wider(names_from = "test", values_from = "score") %>%
mutate(diff = high_pressure-low_pressure) %>%
summarize(low_ave = mean(low_pressure),
low_sd = sd(low_pressure),
high_ave = mean(high_pressure),
high_sd = sd(high_pressure),
diff_ave = mean(diff),
diff_sd = sd(diff))
sim_data[row, 4] <- SUM_DATA[, "low_ave"]
sim_data[row, 5] <- SUM_DATA[, "low_sd"]
sim_data[row, 6] <- SUM_DATA[, "high_ave"]
sim_data[row, 7] <- SUM_DATA[, "high_sd"]
sim_data[row, 8] <- SUM_DATA[, "diff_ave"]
sim_data[row, 9] <- SUM_DATA[, "diff_sd"]
}
}
head(sim_data)
sim_summary <- sim_data %>% group_by(n) %>%
summarize(WS_p = sum(WS_p<0.05)/n(),
ave_dz = mean(diff_ave/diff_sd),
ave_d = mean(diff_ave/sqrt(((low_ave^2)+(high_sd^2))/2))) %>%
pivot_longer(cols=WS_p, names_to = "Effect", values_to = "Power")
sim_summary
# Color blind friendly palette
cbPalette <- c("#000000", "#56B4E9", "#E69F00", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7")
ggplot(data=sim_summary, aes(x=n, y=Power)) +
geom_line(aes(lty=Effect, col=Effect)) +
geom_point(aes(shape=Effect, col=Effect)) +
scale_x_continuous(name = "n/Group") +
scale_y_continuous(name = "Statistical Power", limits=c(0,1),
breaks=c(seq(from=0, to=1, by=0.2))) +
theme_bw()+
scale_fill_manual(values=cbPalette)+
scale_colour_manual(values=cbPalette)+
theme(axis.text=element_text(size=12, color="black"),
legend.text=element_text(size=12, color="black"),
legend.title=element_text(size=12, face="bold"),
axis.title=element_text(size=12, face="bold"),
plot.title=element_text(size=12, face="bold", hjust=0.5),
panel.grid.minor = element_blank(),
strip.text = element_text(size=12, face="bold"),
legend.position = "bottom")
write.csv(sim_data, "./rm_simulation.csv")
View(sim_data)
library(MASS); library(lme4); library(car); library(lmerTest); library(tidyverse)
# Expecting to Teach Group ----
set.seed(1)
teach_size <- 1000 # size of the simulated population
teach_meanvector <- c(94, 51, 56) # means for pre and post tests
teach_correl_matrix <- matrix(c(1, 0.6, 0.6,
0.6, 1, 0.8,
0.6, 0.8, 1), # values for the sample correlation matrix
ncol = 3)
teach_sds <- c(31, 17, 19) # between subject SDs on each test
D <- diag(teach_sds)
teach_covariance_matrix <- D%*%teach_correl_matrix%*%D
teach_distribution <- mvrnorm(n = teach_size,
mu = teach_meanvector,
Sigma = teach_covariance_matrix)
head(teach_distribution)
teach_distribution <- teach_distribution %>% as_tibble() %>%
mutate(group = "teach") %>%
rename(pre_test=V1, low_pressure=V2, high_pressure=V3)
head(teach_distribution)
# Expecting to Test Group ----
set.seed(1)
test_size <- 1000 # size of the simulated population
test_meanvector <- c(92, 60, 60) # means for and post tests
test_correl_matrix <- matrix(c(1, 0.6, 0.6,
0.6, 1, 0.8,
0.6, 0.8, 1), # values for the sample correlation matrix
ncol = 3)
test_sds <- c(35, 23, 22) # between subject SDs on each test
D <- diag(test_sds)
test_covariance_matrix <- D%*%test_correl_matrix%*%D
test_distribution <- mvrnorm(n = test_size,
mu = test_meanvector,
Sigma = test_covariance_matrix)
head(test_distribution)
test_distribution <- test_distribution %>% as_tibble() %>%
mutate(group = "test") %>%
rename(pre_test=V1, low_pressure=V2, high_pressure=V3)
# Using the aov() function versus the lmer() function ----
# Below, I fit the model using the lmer() function,
# but you could build a similar model using aov(), t.test(), lm(), etc.
# I will use lmer() for it's flexibility across designs, but you could
# replace this with whatever analysis best matches your method.
test_sample <- sample_n(test_distribution, size=10)
teach_sample <- sample_n(teach_distribution, size=10)
dat <- rbind(test_sample, teach_sample)
View(dat)
dat_long <- dat %>% rownames_to_column(var="subID") %>%
pivot_longer(cols = low_pressure:high_pressure,
names_to = "test", values_to = "score")
head(dat_long)
mod0 <- lmer(score~pre_test+group*test+(1|subID), data=dat_long, REML=TRUE)
mod0 <- lmer(score~pre_test+group*test+(1|subID), data=dat_long, REML=TRUE)
Anova(mod0, type="III")
anova(mod0)
anova(mod0)[[6]][1] # covariate p-value
anova(mod0)[[6]][2] # group p-value
anova(mod0)[[6]][3] # test p-value
anova(mod0)[[6]][4] # GxT p-value
dat_long %>% pivot_wider(names_from = "test", values_from = "score") %>%
mutate(diff = high_pressure-low_pressure) %>%
group_by(group) %>%
summarize(pre_ave=mean(pre_test),
pre_sd=sd(pre_test),
low_ave=mean(low_pressure),
low_sd=sd(low_pressure),
high_ave=mean(high_pressure),
high_sd=sd(high_pressure),
diff_ave = mean(diff),
diff_sd = sd(diff)) %>%
pivot_wider(values_from=pre_ave:diff_sd, names_from = group)
# Re-sampling to Estimate Statistical Power ----
ns = c(seq(from=30, to=100, by=10)) # sample sizes for the simulations
k = 200 # number of iterations at each sample size
sim_data <- data.frame(matrix(NA, nrow = length(ns)*k,
ncol = 22))
sim_data <- sim_data %>% rename(n=X1,
iter=X2,
Cov_p=X3,
Group_p=X4,
Test_p=X5,
GxT_p=X6,
teach_pre_ave=X7,
teach_pre_sd=X8,
teach_low_ave=X9,
teach_low_sd=X10,
teach_high_ave=X11,
teach_high_sd=X12,
teach_diff_ave = X13,
teach_diff_sd = X14,
test_pre_ave=X15,
test_pre_sd=X16,
test_low_ave=X17,
test_low_sd=X18,
test_high_ave=X19,
test_high_sd=X20,
test_diff_ave = X21,
test_diff_sd = X22)
row = 0
set.seed(1)
for (n in ns) {
print(n)
for (i in 1:k) {
row = row + 1
print(row)
test_sample <- sample_n(test_distribution, size=n)
teach_sample <- sample_n(teach_distribution, size=n)
dat <- rbind(test_sample, teach_sample)
dat_long <- dat %>% rownames_to_column(var="subID") %>%
pivot_longer(cols = low_pressure:high_pressure,
names_to = "test", values_to = "score")
options(contrasts=c("contr.sum","contr.poly"))
mod0 <- lmer(score~pre_test+group*test+(1|subID), data=dat_long, REML=TRUE)
sim_data[row, "n"] <- n
sim_data[row, "iter"] <- i
sim_data[row, "Cov_p"] <- anova(mod0)[[6]][1] # covariate p-value
sim_data[row, "Group_p"] <- anova(mod0)[[6]][2] # group p-value
sim_data[row, "Test_p"] <- anova(mod0)[[6]][3] # test p-value
sim_data[row, "GxT_p"] <- anova(mod0)[[6]][4] # GxT p-value
# Summary Stats
SUM_DATA<-dat_long %>% pivot_wider(names_from = "test", values_from = "score") %>%
mutate(diff = high_pressure-low_pressure) %>%
group_by(group) %>%
summarize(pre_ave=mean(pre_test),
pre_sd=sd(pre_test),
low_ave=mean(low_pressure),
low_sd=sd(low_pressure),
high_ave=mean(high_pressure),
high_sd=sd(high_pressure),
diff_ave = mean(diff),
diff_sd = sd(diff)) %>%
pivot_wider(values_from=pre_ave:diff_sd, names_from = group)
sim_data[row, "teach_pre_ave"] <- SUM_DATA[, "pre_ave_teach"]
sim_data[row, "teach_pre_sd"] <- SUM_DATA[, "pre_sd_teach"]
sim_data[row, "teach_low_ave"] <- SUM_DATA[, "low_ave_teach"]
sim_data[row, "teach_low_sd"] <- SUM_DATA[, "low_sd_teach"]
sim_data[row, "teach_high_ave"] <- SUM_DATA[, "high_ave_teach"]
sim_data[row, "teach_high_sd"] <- SUM_DATA[, "high_sd_teach"]
sim_data[row, "teach_diff_ave"] <- SUM_DATA[, "diff_ave_teach"]
sim_data[row, "teach_diff_sd"] <- SUM_DATA[, "diff_sd_teach"]
sim_data[row, "test_pre_ave"] <- SUM_DATA[, "pre_ave_test"]
sim_data[row, "test_pre_sd"] <- SUM_DATA[, "pre_sd_test"]
sim_data[row, "test_low_ave"] <- SUM_DATA[, "low_ave_test"]
sim_data[row, "test_low_sd"] <- SUM_DATA[, "low_sd_test"]
sim_data[row, "test_high_ave"] <- SUM_DATA[, "high_ave_test"]
sim_data[row, "test_high_sd"] <- SUM_DATA[, "high_sd_test"]
sim_data[row, "test_diff_ave"] <- SUM_DATA[, "diff_ave_test"]
sim_data[row, "test_diff_sd"] <- SUM_DATA[, "diff_sd_test"]
}
}
View(sim_data)
sim_summary <- sim_data %>% group_by(n) %>%
summarize(Cov_sig = sum(Cov_p<0.05)/n(),
Group_sig = sum(Group_p<0.05)/n(),
Test_sig = sum(Test_p<0.05)/n(),
GxT_sig = sum(GxT_p<0.05)/n(),) %>%
pivot_longer(cols=Cov_sig:GxT_sig, names_to = "Effect", values_to = "Power") %>%
mutate(Effect = fct_relevel(Effect, "Cov_sig", "Group_sig", "Test_sig", "GxT_sig"))
sim_summary
# Color blind friendly palette
cbPalette <- c("#000000", "#56B4E9", "#E69F00", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7")
ggplot(data=sim_summary, aes(x=n, y=Power)) +
geom_line(aes(lty=Effect, col=Effect)) +
geom_point(aes(shape=Effect, col=Effect)) +
scale_x_continuous(name = "n/Group") +
scale_y_continuous(name = "Statistical Power", limits=c(0,1),
breaks=c(seq(from=0, to=1, by=0.2))) +
theme_bw()+
scale_fill_manual(values=cbPalette)+
scale_colour_manual(values=cbPalette)+
theme(axis.text=element_text(size=12, color="black"),
legend.text=element_text(size=12, color="black"),
legend.title=element_text(size=12, face="bold"),
axis.title=element_text(size=12, face="bold"),
plot.title=element_text(size=12, face="bold", hjust=0.5),
panel.grid.minor = element_blank(),
strip.text = element_text(size=12, face="bold"),
legend.position = "bottom")
head(sim_data)
sim_data_long <- sim_data %>% select(-Cov_p, -Group_p, -Test_p, -GxT_p) %>%
pivot_longer(cols=teach_pre_ave:test_diff_sd,
names_to=c("Group", "Test", "Variable"),
names_sep="_",
values_to = "Score") %>%
pivot_wider(names_from = "Variable", values_from = "Score")
head(sim_data_long)
ggplot(data=sim_data_long %>% filter(Test == "diff"),
aes(x=ave)) +
geom_histogram(aes(fill=Group), col="black")+
facet_wrap(~n)+
scale_x_continuous(name = "Difference (High - Low Pressure)") +
scale_y_continuous(name = "Count") +
theme_bw()+
scale_fill_manual(values=cbPalette)+
scale_colour_manual(values=cbPalette)+
theme(axis.text=element_text(size=12, color="black"),
legend.text=element_text(size=12, color="black"),
legend.title=element_text(size=12, face="bold"),
axis.title=element_text(size=12, face="bold"),
plot.title=element_text(size=12, face="bold", hjust=0.5),
panel.grid.minor = element_blank(),
strip.text = element_text(size=12, face="bold"),
legend.position = "bottom")
reticulate::repl_python()
import numpy as np
import pandas as pd
# assigning values to variables and basic operations
x = 2
x = x + 3
print(x * 3)
y = 2
print(x / y)
print(x < 2)
print(x > 2)
print(z < str(2))  # 2 gets coerced to a string for comparison
z = "word"
print(x * z)  # This will raise a TypeError
print(x < 2)
print(x > 2)
print(z < str(2))  # 2 gets coerced to a string for comparison
print(z < 2)  # 2 gets coerced to a string for comparison
print(z < 2)  # This will raise a TypeError
print(z > str(2))
print(isinstance(z, str))
print(isinstance(z, (int, float)))
# some data types
# vectors
x = np.array([2, 3, 4])
y = np.array([0, 1, 0])
print(x * y)
z = np.array(["red", "red", "blue", "blue", "green", "green"])
print(np.unique(z, return_counts=True))
print(z.dtype)
z.dtype
print(z.info())
info(z)
pd.info(z)
z.pd.info()
z = pd.DataFrame(["red", "red", "blue", "blue", "green", "green"])
z.info()
print(z)
z.pd.info()
print(np.dtype(z))
z = np.array(["red", "red", "blue", "blue", "green", "green"])
print(np.unique(z, return_counts=True))
print(np.dtype(z))
print(z.dtype)
df.describe(z)
pd.df.describe(z)
pd.describe(z)
z = pd.Series(z)
print(z.describe())
print(z.dtype)
z = pd.DataFrame(z)
print(z.describe())
z = np.array(["red", "red", "blue", "blue", "green", "green"])
print(np.unique(z, return_counts=True))
print(z.dtype)
z = pd.DataFrame(z)
print(z.describe())
print(z.dtype)
z = pd.Series(z)
mat_data = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])
mat1 = mat_data.reshape((3, 3))
print(mat1)
print(mat1[0, :])
print(mat1[:, 2])
print(mat1[0, 2])
# lists
my_list = ["a", True, list(range(91, 86, -1))]
print(my_list)
print(my_list[0])
print(my_list[2])
print(my_list[2][2])
# data frames
sex = np.array(["male"] * 10 + ["female"] * 10)
height = np.concatenate((np.random.normal(67, 2.5, 10), np.random.normal(64, 2.2, 10)))
DAT1 = pd.DataFrame({"sex": sex, "height": height})
print(DAT1)
DAT1.plot(x="sex", y="height", kind="scatter")
plt.show()
DAT1.show()
DAT1.plot(x="sex", y="height", kind="scatter").show()
DAT1.plot(x="sex", y="height", kind="scatter")
plt1 = DAT1.plot(x="sex", y="height", kind="scatter")
plt1.show()
DAT1.plot(x="sex", y="height", kind="scatter")
DAT1.plot(x="sex", y="height", kind="scatter")
plt.show()
plt.plot(x="sex", y="height", kind="scatter")
import matplotlib.pyplot as plt
import matplotlib.pyplot as plt
plt.plot(x="sex", y="height", kind="scatter")
DAT1.plot(x="sex", y="height", kind="scatter")
plt.show()
# functions and arguments
print(x)
print(x.mean())
help(x.mean)
print(type(x))
print(type(z))
print(type(my_list))
print(type(DAT1))
print(pd.Series(my_list).apply(type))
print(DAT1.dtypes)
print(np.mean(x))
x = np.append(x, [np.nan, 0, 15])
print(x)
print(np.nanmean(x))
import os
print(os.getcwd())
print(os.listdir())
os.chdir("~/GitHub/ReproRehab/")
os.chdir("./GitHub/ReproRehab/")
print(os.listdir())
os.chdir("./data/")
print(os.listdir())
# importing data from your computer
DAT2 = pd.read_csv("./data_PROCESSED_EEG.csv", header=True)
print(os.listdir())
DAT2 = pd.read_csv("data_PROCESSED_EEG.csv", header=True)
DAT2 = pd.read_csv("data_PROCESSED_EEG.csv", header=int)
DAT2 = pd.read_csv("data_PROCESSED_EEG.csv")
print(DAT2.head())
# importing data from the web
DAT3 = pd.read_csv("https://raw.githubusercontent.com/keithlohse/grad_stats/main/data/data_THERAPY.csv", header=True)
DAT3 = pd.read_csv("https://raw.githubusercontent.com/keithlohse/grad_stats/main/data/data_THERAPY.csv")
print(DAT3.head())
